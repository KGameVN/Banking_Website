// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"comb.com/banking/ent/transactionhistory"
	"comb.com/banking/ent/useraccount"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionHistoryCreate is the builder for creating a TransactionHistory entity.
type TransactionHistoryCreate struct {
	config
	mutation *TransactionHistoryMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (thc *TransactionHistoryCreate) SetType(s string) *TransactionHistoryCreate {
	thc.mutation.SetType(s)
	return thc
}

// SetAccountNumberID sets the "account_number_id" field.
func (thc *TransactionHistoryCreate) SetAccountNumberID(i int) *TransactionHistoryCreate {
	thc.mutation.SetAccountNumberID(i)
	return thc
}

// SetAmount sets the "amount" field.
func (thc *TransactionHistoryCreate) SetAmount(i int64) *TransactionHistoryCreate {
	thc.mutation.SetAmount(i)
	return thc
}

// SetCreatedAt sets the "created_at" field.
func (thc *TransactionHistoryCreate) SetCreatedAt(t time.Time) *TransactionHistoryCreate {
	thc.mutation.SetCreatedAt(t)
	return thc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thc *TransactionHistoryCreate) SetNillableCreatedAt(t *time.Time) *TransactionHistoryCreate {
	if t != nil {
		thc.SetCreatedAt(*t)
	}
	return thc
}

// SetUserAccountsID sets the "user_accounts" edge to the UserAccount entity by ID.
func (thc *TransactionHistoryCreate) SetUserAccountsID(id int) *TransactionHistoryCreate {
	thc.mutation.SetUserAccountsID(id)
	return thc
}

// SetUserAccounts sets the "user_accounts" edge to the UserAccount entity.
func (thc *TransactionHistoryCreate) SetUserAccounts(u *UserAccount) *TransactionHistoryCreate {
	return thc.SetUserAccountsID(u.ID)
}

// Mutation returns the TransactionHistoryMutation object of the builder.
func (thc *TransactionHistoryCreate) Mutation() *TransactionHistoryMutation {
	return thc.mutation
}

// Save creates the TransactionHistory in the database.
func (thc *TransactionHistoryCreate) Save(ctx context.Context) (*TransactionHistory, error) {
	thc.defaults()
	return withHooks(ctx, thc.sqlSave, thc.mutation, thc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (thc *TransactionHistoryCreate) SaveX(ctx context.Context) *TransactionHistory {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *TransactionHistoryCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *TransactionHistoryCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thc *TransactionHistoryCreate) defaults() {
	if _, ok := thc.mutation.CreatedAt(); !ok {
		v := transactionhistory.DefaultCreatedAt()
		thc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *TransactionHistoryCreate) check() error {
	if _, ok := thc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TransactionHistory.type"`)}
	}
	if v, ok := thc.mutation.GetType(); ok {
		if err := transactionhistory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TransactionHistory.type": %w`, err)}
		}
	}
	if _, ok := thc.mutation.AccountNumberID(); !ok {
		return &ValidationError{Name: "account_number_id", err: errors.New(`ent: missing required field "TransactionHistory.account_number_id"`)}
	}
	if _, ok := thc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TransactionHistory.amount"`)}
	}
	if _, ok := thc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TransactionHistory.created_at"`)}
	}
	if len(thc.mutation.UserAccountsIDs()) == 0 {
		return &ValidationError{Name: "user_accounts", err: errors.New(`ent: missing required edge "TransactionHistory.user_accounts"`)}
	}
	return nil
}

func (thc *TransactionHistoryCreate) sqlSave(ctx context.Context) (*TransactionHistory, error) {
	if err := thc.check(); err != nil {
		return nil, err
	}
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	thc.mutation.id = &_node.ID
	thc.mutation.done = true
	return _node, nil
}

func (thc *TransactionHistoryCreate) createSpec() (*TransactionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TransactionHistory{config: thc.config}
		_spec = sqlgraph.NewCreateSpec(transactionhistory.Table, sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeInt))
	)
	if value, ok := thc.mutation.GetType(); ok {
		_spec.SetField(transactionhistory.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := thc.mutation.Amount(); ok {
		_spec.SetField(transactionhistory.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := thc.mutation.CreatedAt(); ok {
		_spec.SetField(transactionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := thc.mutation.UserAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionhistory.UserAccountsTable,
			Columns: []string{transactionhistory.UserAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountNumberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionHistoryCreateBulk is the builder for creating many TransactionHistory entities in bulk.
type TransactionHistoryCreateBulk struct {
	config
	err      error
	builders []*TransactionHistoryCreate
}

// Save creates the TransactionHistory entities in the database.
func (thcb *TransactionHistoryCreateBulk) Save(ctx context.Context) ([]*TransactionHistory, error) {
	if thcb.err != nil {
		return nil, thcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*TransactionHistory, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *TransactionHistoryCreateBulk) SaveX(ctx context.Context) []*TransactionHistory {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *TransactionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *TransactionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}
