// Code generated by ent, DO NOT EDIT.

package transfer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transfer type in the database.
	Label = "transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// EdgeFromAccount holds the string denoting the from_account edge name in mutations.
	EdgeFromAccount = "from_account"
	// EdgeToAccount holds the string denoting the to_account edge name in mutations.
	EdgeToAccount = "to_account"
	// Table holds the table name of the transfer in the database.
	Table = "transfers"
	// FromAccountTable is the table that holds the from_account relation/edge.
	FromAccountTable = "transfers"
	// FromAccountInverseTable is the table name for the UserAccount entity.
	// It exists in this package in order to avoid circular dependency with the "useraccount" package.
	FromAccountInverseTable = "user_accounts"
	// FromAccountColumn is the table column denoting the from_account relation/edge.
	FromAccountColumn = "user_account_outgoing_transfers"
	// ToAccountTable is the table that holds the to_account relation/edge.
	ToAccountTable = "transfers"
	// ToAccountInverseTable is the table name for the UserAccount entity.
	// It exists in this package in order to avoid circular dependency with the "useraccount" package.
	ToAccountInverseTable = "user_accounts"
	// ToAccountColumn is the table column denoting the to_account relation/edge.
	ToAccountColumn = "user_account_incoming_transfers"
)

// Columns holds all SQL columns for transfer fields.
var Columns = []string{
	FieldID,
	FieldAmount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transfers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_account_outgoing_transfers",
	"user_account_incoming_transfers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Transfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByFromAccountField orders the results by from_account field.
func ByFromAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByToAccountField orders the results by to_account field.
func ByToAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToAccountStep(), sql.OrderByField(field, opts...))
	}
}
func newFromAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FromAccountTable, FromAccountColumn),
	)
}
func newToAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ToAccountTable, ToAccountColumn),
	)
}
