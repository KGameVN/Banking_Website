// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"comb.com/banking/ent/transfer"
	"comb.com/banking/ent/useraccount"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Transfer is the model entity for the Transfer schema.
type Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransferQuery when eager-loading is set.
	Edges                           TransferEdges `json:"edges"`
	user_account_outgoing_transfers *int
	user_account_incoming_transfers *int
	selectValues                    sql.SelectValues
}

// TransferEdges holds the relations/edges for other nodes in the graph.
type TransferEdges struct {
	// FromAccount holds the value of the from_account edge.
	FromAccount *UserAccount `json:"from_account,omitempty"`
	// ToAccount holds the value of the to_account edge.
	ToAccount *UserAccount `json:"to_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromAccountOrErr returns the FromAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) FromAccountOrErr() (*UserAccount, error) {
	if e.FromAccount != nil {
		return e.FromAccount, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: useraccount.Label}
	}
	return nil, &NotLoadedError{edge: "from_account"}
}

// ToAccountOrErr returns the ToAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) ToAccountOrErr() (*UserAccount, error) {
	if e.ToAccount != nil {
		return e.ToAccount, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: useraccount.Label}
	}
	return nil, &NotLoadedError{edge: "to_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID, transfer.FieldAmount:
			values[i] = new(sql.NullInt64)
		case transfer.ForeignKeys[0]: // user_account_outgoing_transfers
			values[i] = new(sql.NullInt64)
		case transfer.ForeignKeys[1]: // user_account_incoming_transfers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfer fields.
func (t *Transfer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transfer.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = int(value.Int64)
			}
		case transfer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_account_outgoing_transfers", value)
			} else if value.Valid {
				t.user_account_outgoing_transfers = new(int)
				*t.user_account_outgoing_transfers = int(value.Int64)
			}
		case transfer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_account_incoming_transfers", value)
			} else if value.Valid {
				t.user_account_incoming_transfers = new(int)
				*t.user_account_incoming_transfers = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transfer.
// This includes values selected through modifiers, order, etc.
func (t *Transfer) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryFromAccount queries the "from_account" edge of the Transfer entity.
func (t *Transfer) QueryFromAccount() *UserAccountQuery {
	return NewTransferClient(t.config).QueryFromAccount(t)
}

// QueryToAccount queries the "to_account" edge of the Transfer entity.
func (t *Transfer) QueryToAccount() *UserAccountQuery {
	return NewTransferClient(t.config).QueryToAccount(t)
}

// Update returns a builder for updating this Transfer.
// Note that you need to call Transfer.Unwrap() before calling this method if this Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transfer) Update() *TransferUpdateOne {
	return NewTransferClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transfer) Unwrap() *Transfer {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transfer is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Transfers is a parsable slice of Transfer.
type Transfers []*Transfer
