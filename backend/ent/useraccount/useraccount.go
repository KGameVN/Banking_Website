// Code generated by ent, DO NOT EDIT.

package useraccount

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the useraccount type in the database.
	Label = "user_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// EdgeOutgoingTransfers holds the string denoting the outgoing_transfers edge name in mutations.
	EdgeOutgoingTransfers = "outgoing_transfers"
	// EdgeIncomingTransfers holds the string denoting the incoming_transfers edge name in mutations.
	EdgeIncomingTransfers = "incoming_transfers"
	// EdgeAccountNumberID holds the string denoting the account_number_id edge name in mutations.
	EdgeAccountNumberID = "account_number_id"
	// Table holds the table name of the useraccount in the database.
	Table = "user_accounts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_accounts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_user_id"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "user_account_transactions"
	// OutgoingTransfersTable is the table that holds the outgoing_transfers relation/edge.
	OutgoingTransfersTable = "transfers"
	// OutgoingTransfersInverseTable is the table name for the Transfer entity.
	// It exists in this package in order to avoid circular dependency with the "transfer" package.
	OutgoingTransfersInverseTable = "transfers"
	// OutgoingTransfersColumn is the table column denoting the outgoing_transfers relation/edge.
	OutgoingTransfersColumn = "user_account_outgoing_transfers"
	// IncomingTransfersTable is the table that holds the incoming_transfers relation/edge.
	IncomingTransfersTable = "transfers"
	// IncomingTransfersInverseTable is the table name for the Transfer entity.
	// It exists in this package in order to avoid circular dependency with the "transfer" package.
	IncomingTransfersInverseTable = "transfers"
	// IncomingTransfersColumn is the table column denoting the incoming_transfers relation/edge.
	IncomingTransfersColumn = "user_account_incoming_transfers"
	// AccountNumberIDTable is the table that holds the account_number_id relation/edge.
	AccountNumberIDTable = "transaction_history"
	// AccountNumberIDInverseTable is the table name for the TransactionHistory entity.
	// It exists in this package in order to avoid circular dependency with the "transactionhistory" package.
	AccountNumberIDInverseTable = "transaction_history"
	// AccountNumberIDColumn is the table column denoting the account_number_id relation/edge.
	AccountNumberIDColumn = "account_number_id"
)

// Columns holds all SQL columns for useraccount fields.
var Columns = []string{
	FieldID,
	FieldBalance,
	FieldAccountNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOutgoingTransfersCount orders the results by outgoing_transfers count.
func ByOutgoingTransfersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOutgoingTransfersStep(), opts...)
	}
}

// ByOutgoingTransfers orders the results by outgoing_transfers terms.
func ByOutgoingTransfers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutgoingTransfersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncomingTransfersCount orders the results by incoming_transfers count.
func ByIncomingTransfersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncomingTransfersStep(), opts...)
	}
}

// ByIncomingTransfers orders the results by incoming_transfers terms.
func ByIncomingTransfers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncomingTransfersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountNumberIDCount orders the results by account_number_id count.
func ByAccountNumberIDCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountNumberIDStep(), opts...)
	}
}

// ByAccountNumberID orders the results by account_number_id terms.
func ByAccountNumberID(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountNumberIDStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
func newOutgoingTransfersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutgoingTransfersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OutgoingTransfersTable, OutgoingTransfersColumn),
	)
}
func newIncomingTransfersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncomingTransfersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IncomingTransfersTable, IncomingTransfersColumn),
	)
}
func newAccountNumberIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountNumberIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountNumberIDTable, AccountNumberIDColumn),
	)
}
