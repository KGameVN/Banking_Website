// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"comb.com/banking/ent/logintoken"
	"comb.com/banking/ent/predicate"
	"comb.com/banking/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginTokenUpdate is the builder for updating LoginToken entities.
type LoginTokenUpdate struct {
	config
	hooks    []Hook
	mutation *LoginTokenMutation
}

// Where appends a list predicates to the LoginTokenUpdate builder.
func (ltu *LoginTokenUpdate) Where(ps ...predicate.LoginToken) *LoginTokenUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetToken sets the "token" field.
func (ltu *LoginTokenUpdate) SetToken(s string) *LoginTokenUpdate {
	ltu.mutation.SetToken(s)
	return ltu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (ltu *LoginTokenUpdate) SetNillableToken(s *string) *LoginTokenUpdate {
	if s != nil {
		ltu.SetToken(*s)
	}
	return ltu
}

// SetExpiredtime sets the "expiredtime" field.
func (ltu *LoginTokenUpdate) SetExpiredtime(t time.Time) *LoginTokenUpdate {
	ltu.mutation.SetExpiredtime(t)
	return ltu
}

// SetNillableExpiredtime sets the "expiredtime" field if the given value is not nil.
func (ltu *LoginTokenUpdate) SetNillableExpiredtime(t *time.Time) *LoginTokenUpdate {
	if t != nil {
		ltu.SetExpiredtime(*t)
	}
	return ltu
}

// ClearExpiredtime clears the value of the "expiredtime" field.
func (ltu *LoginTokenUpdate) ClearExpiredtime() *LoginTokenUpdate {
	ltu.mutation.ClearExpiredtime()
	return ltu
}

// SetCreatedAt sets the "created_at" field.
func (ltu *LoginTokenUpdate) SetCreatedAt(t time.Time) *LoginTokenUpdate {
	ltu.mutation.SetCreatedAt(t)
	return ltu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltu *LoginTokenUpdate) SetNillableCreatedAt(t *time.Time) *LoginTokenUpdate {
	if t != nil {
		ltu.SetCreatedAt(*t)
	}
	return ltu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ltu *LoginTokenUpdate) SetUserID(id int) *LoginTokenUpdate {
	ltu.mutation.SetUserID(id)
	return ltu
}

// SetUser sets the "user" edge to the User entity.
func (ltu *LoginTokenUpdate) SetUser(u *User) *LoginTokenUpdate {
	return ltu.SetUserID(u.ID)
}

// Mutation returns the LoginTokenMutation object of the builder.
func (ltu *LoginTokenUpdate) Mutation() *LoginTokenMutation {
	return ltu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ltu *LoginTokenUpdate) ClearUser() *LoginTokenUpdate {
	ltu.mutation.ClearUser()
	return ltu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LoginTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ltu.sqlSave, ltu.mutation, ltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LoginTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LoginTokenUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LoginTokenUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LoginTokenUpdate) check() error {
	if v, ok := ltu.mutation.Token(); ok {
		if err := logintoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "LoginToken.token": %w`, err)}
		}
	}
	if ltu.mutation.UserCleared() && len(ltu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LoginToken.user"`)
	}
	return nil
}

func (ltu *LoginTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(logintoken.Table, logintoken.Columns, sqlgraph.NewFieldSpec(logintoken.FieldID, field.TypeInt))
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.Token(); ok {
		_spec.SetField(logintoken.FieldToken, field.TypeString, value)
	}
	if value, ok := ltu.mutation.Expiredtime(); ok {
		_spec.SetField(logintoken.FieldExpiredtime, field.TypeTime, value)
	}
	if ltu.mutation.ExpiredtimeCleared() {
		_spec.ClearField(logintoken.FieldExpiredtime, field.TypeTime)
	}
	if value, ok := ltu.mutation.CreatedAt(); ok {
		_spec.SetField(logintoken.FieldCreatedAt, field.TypeTime, value)
	}
	if ltu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   logintoken.UserTable,
			Columns: []string{logintoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   logintoken.UserTable,
			Columns: []string{logintoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logintoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltu.mutation.done = true
	return n, nil
}

// LoginTokenUpdateOne is the builder for updating a single LoginToken entity.
type LoginTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginTokenMutation
}

// SetToken sets the "token" field.
func (ltuo *LoginTokenUpdateOne) SetToken(s string) *LoginTokenUpdateOne {
	ltuo.mutation.SetToken(s)
	return ltuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (ltuo *LoginTokenUpdateOne) SetNillableToken(s *string) *LoginTokenUpdateOne {
	if s != nil {
		ltuo.SetToken(*s)
	}
	return ltuo
}

// SetExpiredtime sets the "expiredtime" field.
func (ltuo *LoginTokenUpdateOne) SetExpiredtime(t time.Time) *LoginTokenUpdateOne {
	ltuo.mutation.SetExpiredtime(t)
	return ltuo
}

// SetNillableExpiredtime sets the "expiredtime" field if the given value is not nil.
func (ltuo *LoginTokenUpdateOne) SetNillableExpiredtime(t *time.Time) *LoginTokenUpdateOne {
	if t != nil {
		ltuo.SetExpiredtime(*t)
	}
	return ltuo
}

// ClearExpiredtime clears the value of the "expiredtime" field.
func (ltuo *LoginTokenUpdateOne) ClearExpiredtime() *LoginTokenUpdateOne {
	ltuo.mutation.ClearExpiredtime()
	return ltuo
}

// SetCreatedAt sets the "created_at" field.
func (ltuo *LoginTokenUpdateOne) SetCreatedAt(t time.Time) *LoginTokenUpdateOne {
	ltuo.mutation.SetCreatedAt(t)
	return ltuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltuo *LoginTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *LoginTokenUpdateOne {
	if t != nil {
		ltuo.SetCreatedAt(*t)
	}
	return ltuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ltuo *LoginTokenUpdateOne) SetUserID(id int) *LoginTokenUpdateOne {
	ltuo.mutation.SetUserID(id)
	return ltuo
}

// SetUser sets the "user" edge to the User entity.
func (ltuo *LoginTokenUpdateOne) SetUser(u *User) *LoginTokenUpdateOne {
	return ltuo.SetUserID(u.ID)
}

// Mutation returns the LoginTokenMutation object of the builder.
func (ltuo *LoginTokenUpdateOne) Mutation() *LoginTokenMutation {
	return ltuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ltuo *LoginTokenUpdateOne) ClearUser() *LoginTokenUpdateOne {
	ltuo.mutation.ClearUser()
	return ltuo
}

// Where appends a list predicates to the LoginTokenUpdate builder.
func (ltuo *LoginTokenUpdateOne) Where(ps ...predicate.LoginToken) *LoginTokenUpdateOne {
	ltuo.mutation.Where(ps...)
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LoginTokenUpdateOne) Select(field string, fields ...string) *LoginTokenUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LoginToken entity.
func (ltuo *LoginTokenUpdateOne) Save(ctx context.Context) (*LoginToken, error) {
	return withHooks(ctx, ltuo.sqlSave, ltuo.mutation, ltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LoginTokenUpdateOne) SaveX(ctx context.Context) *LoginToken {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LoginTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LoginTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LoginTokenUpdateOne) check() error {
	if v, ok := ltuo.mutation.Token(); ok {
		if err := logintoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "LoginToken.token": %w`, err)}
		}
	}
	if ltuo.mutation.UserCleared() && len(ltuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LoginToken.user"`)
	}
	return nil
}

func (ltuo *LoginTokenUpdateOne) sqlSave(ctx context.Context) (_node *LoginToken, err error) {
	if err := ltuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(logintoken.Table, logintoken.Columns, sqlgraph.NewFieldSpec(logintoken.FieldID, field.TypeInt))
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logintoken.FieldID)
		for _, f := range fields {
			if !logintoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logintoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.Token(); ok {
		_spec.SetField(logintoken.FieldToken, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.Expiredtime(); ok {
		_spec.SetField(logintoken.FieldExpiredtime, field.TypeTime, value)
	}
	if ltuo.mutation.ExpiredtimeCleared() {
		_spec.ClearField(logintoken.FieldExpiredtime, field.TypeTime)
	}
	if value, ok := ltuo.mutation.CreatedAt(); ok {
		_spec.SetField(logintoken.FieldCreatedAt, field.TypeTime, value)
	}
	if ltuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   logintoken.UserTable,
			Columns: []string{logintoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   logintoken.UserTable,
			Columns: []string{logintoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginToken{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logintoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltuo.mutation.done = true
	return _node, nil
}
