// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"comb.com/banking/ent/user"
	"comb.com/banking/ent/useraccount"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserAccount is the model entity for the UserAccount schema.
type UserAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber int64 `json:"account_number,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance int64 `json:"balance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAccountQuery when eager-loading is set.
	Edges         UserAccountEdges `json:"edges"`
	user_accounts *int
	selectValues  sql.SelectValues
}

// UserAccountEdges holds the relations/edges for other nodes in the graph.
type UserAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// OutgoingTransfers holds the value of the outgoing_transfers edge.
	OutgoingTransfers []*Transfer `json:"outgoing_transfers,omitempty"`
	// IncomingTransfers holds the value of the incoming_transfers edge.
	IncomingTransfers []*Transfer `json:"incoming_transfers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAccountEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// OutgoingTransfersOrErr returns the OutgoingTransfers value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) OutgoingTransfersOrErr() ([]*Transfer, error) {
	if e.loadedTypes[2] {
		return e.OutgoingTransfers, nil
	}
	return nil, &NotLoadedError{edge: "outgoing_transfers"}
}

// IncomingTransfersOrErr returns the IncomingTransfers value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) IncomingTransfersOrErr() ([]*Transfer, error) {
	if e.loadedTypes[3] {
		return e.IncomingTransfers, nil
	}
	return nil, &NotLoadedError{edge: "incoming_transfers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraccount.FieldID, useraccount.FieldAccountNumber, useraccount.FieldBalance:
			values[i] = new(sql.NullInt64)
		case useraccount.ForeignKeys[0]: // user_accounts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAccount fields.
func (ua *UserAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case useraccount.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				ua.AccountNumber = value.Int64
			}
		case useraccount.FieldBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				ua.Balance = value.Int64
			}
		case useraccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_accounts", value)
			} else if value.Valid {
				ua.user_accounts = new(int)
				*ua.user_accounts = int(value.Int64)
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAccount.
// This includes values selected through modifiers, order, etc.
func (ua *UserAccount) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAccount entity.
func (ua *UserAccount) QueryUser() *UserQuery {
	return NewUserAccountClient(ua.config).QueryUser(ua)
}

// QueryTransactions queries the "transactions" edge of the UserAccount entity.
func (ua *UserAccount) QueryTransactions() *TransactionQuery {
	return NewUserAccountClient(ua.config).QueryTransactions(ua)
}

// QueryOutgoingTransfers queries the "outgoing_transfers" edge of the UserAccount entity.
func (ua *UserAccount) QueryOutgoingTransfers() *TransferQuery {
	return NewUserAccountClient(ua.config).QueryOutgoingTransfers(ua)
}

// QueryIncomingTransfers queries the "incoming_transfers" edge of the UserAccount entity.
func (ua *UserAccount) QueryIncomingTransfers() *TransferQuery {
	return NewUserAccountClient(ua.config).QueryIncomingTransfers(ua)
}

// Update returns a builder for updating this UserAccount.
// Note that you need to call UserAccount.Unwrap() before calling this method if this UserAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAccount) Update() *UserAccountUpdateOne {
	return NewUserAccountClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAccount) Unwrap() *UserAccount {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAccount is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAccount) String() string {
	var builder strings.Builder
	builder.WriteString("UserAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("account_number=")
	builder.WriteString(fmt.Sprintf("%v", ua.AccountNumber))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", ua.Balance))
	builder.WriteByte(')')
	return builder.String()
}

// UserAccounts is a parsable slice of UserAccount.
type UserAccounts []*UserAccount
