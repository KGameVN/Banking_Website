// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"comb.com/banking/ent/predicate"
	"comb.com/banking/ent/transfer"
	"comb.com/banking/ent/useraccount"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransferUpdate is the builder for updating Transfer entities.
type TransferUpdate struct {
	config
	hooks    []Hook
	mutation *TransferMutation
}

// Where appends a list predicates to the TransferUpdate builder.
func (tu *TransferUpdate) Where(ps ...predicate.Transfer) *TransferUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransferUpdate) SetAmount(i int) *TransferUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(i)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableAmount(i *int) *TransferUpdate {
	if i != nil {
		tu.SetAmount(*i)
	}
	return tu
}

// AddAmount adds i to the "amount" field.
func (tu *TransferUpdate) AddAmount(i int) *TransferUpdate {
	tu.mutation.AddAmount(i)
	return tu
}

// SetFromAccountID sets the "from_account" edge to the UserAccount entity by ID.
func (tu *TransferUpdate) SetFromAccountID(id int) *TransferUpdate {
	tu.mutation.SetFromAccountID(id)
	return tu
}

// SetNillableFromAccountID sets the "from_account" edge to the UserAccount entity by ID if the given value is not nil.
func (tu *TransferUpdate) SetNillableFromAccountID(id *int) *TransferUpdate {
	if id != nil {
		tu = tu.SetFromAccountID(*id)
	}
	return tu
}

// SetFromAccount sets the "from_account" edge to the UserAccount entity.
func (tu *TransferUpdate) SetFromAccount(u *UserAccount) *TransferUpdate {
	return tu.SetFromAccountID(u.ID)
}

// SetToAccountID sets the "to_account" edge to the UserAccount entity by ID.
func (tu *TransferUpdate) SetToAccountID(id int) *TransferUpdate {
	tu.mutation.SetToAccountID(id)
	return tu
}

// SetNillableToAccountID sets the "to_account" edge to the UserAccount entity by ID if the given value is not nil.
func (tu *TransferUpdate) SetNillableToAccountID(id *int) *TransferUpdate {
	if id != nil {
		tu = tu.SetToAccountID(*id)
	}
	return tu
}

// SetToAccount sets the "to_account" edge to the UserAccount entity.
func (tu *TransferUpdate) SetToAccount(u *UserAccount) *TransferUpdate {
	return tu.SetToAccountID(u.ID)
}

// Mutation returns the TransferMutation object of the builder.
func (tu *TransferUpdate) Mutation() *TransferMutation {
	return tu.mutation
}

// ClearFromAccount clears the "from_account" edge to the UserAccount entity.
func (tu *TransferUpdate) ClearFromAccount() *TransferUpdate {
	tu.mutation.ClearFromAccount()
	return tu
}

// ClearToAccount clears the "to_account" edge to the UserAccount entity.
func (tu *TransferUpdate) ClearToAccount() *TransferUpdate {
	tu.mutation.ClearToAccount()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransferUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransferUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransferUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transfer.FieldAmount, field.TypeInt, value)
	}
	if tu.mutation.FromAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.FromAccountTable,
			Columns: []string{transfer.FromAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FromAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.FromAccountTable,
			Columns: []string{transfer.FromAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ToAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.ToAccountTable,
			Columns: []string{transfer.ToAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ToAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.ToAccountTable,
			Columns: []string{transfer.ToAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransferUpdateOne is the builder for updating a single Transfer entity.
type TransferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransferMutation
}

// SetAmount sets the "amount" field.
func (tuo *TransferUpdateOne) SetAmount(i int) *TransferUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(i)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableAmount(i *int) *TransferUpdateOne {
	if i != nil {
		tuo.SetAmount(*i)
	}
	return tuo
}

// AddAmount adds i to the "amount" field.
func (tuo *TransferUpdateOne) AddAmount(i int) *TransferUpdateOne {
	tuo.mutation.AddAmount(i)
	return tuo
}

// SetFromAccountID sets the "from_account" edge to the UserAccount entity by ID.
func (tuo *TransferUpdateOne) SetFromAccountID(id int) *TransferUpdateOne {
	tuo.mutation.SetFromAccountID(id)
	return tuo
}

// SetNillableFromAccountID sets the "from_account" edge to the UserAccount entity by ID if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableFromAccountID(id *int) *TransferUpdateOne {
	if id != nil {
		tuo = tuo.SetFromAccountID(*id)
	}
	return tuo
}

// SetFromAccount sets the "from_account" edge to the UserAccount entity.
func (tuo *TransferUpdateOne) SetFromAccount(u *UserAccount) *TransferUpdateOne {
	return tuo.SetFromAccountID(u.ID)
}

// SetToAccountID sets the "to_account" edge to the UserAccount entity by ID.
func (tuo *TransferUpdateOne) SetToAccountID(id int) *TransferUpdateOne {
	tuo.mutation.SetToAccountID(id)
	return tuo
}

// SetNillableToAccountID sets the "to_account" edge to the UserAccount entity by ID if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableToAccountID(id *int) *TransferUpdateOne {
	if id != nil {
		tuo = tuo.SetToAccountID(*id)
	}
	return tuo
}

// SetToAccount sets the "to_account" edge to the UserAccount entity.
func (tuo *TransferUpdateOne) SetToAccount(u *UserAccount) *TransferUpdateOne {
	return tuo.SetToAccountID(u.ID)
}

// Mutation returns the TransferMutation object of the builder.
func (tuo *TransferUpdateOne) Mutation() *TransferMutation {
	return tuo.mutation
}

// ClearFromAccount clears the "from_account" edge to the UserAccount entity.
func (tuo *TransferUpdateOne) ClearFromAccount() *TransferUpdateOne {
	tuo.mutation.ClearFromAccount()
	return tuo
}

// ClearToAccount clears the "to_account" edge to the UserAccount entity.
func (tuo *TransferUpdateOne) ClearToAccount() *TransferUpdateOne {
	tuo.mutation.ClearToAccount()
	return tuo
}

// Where appends a list predicates to the TransferUpdate builder.
func (tuo *TransferUpdateOne) Where(ps ...predicate.Transfer) *TransferUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransferUpdateOne) Select(field string, fields ...string) *TransferUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfer entity.
func (tuo *TransferUpdateOne) Save(ctx context.Context) (*Transfer, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransferUpdateOne) SaveX(ctx context.Context) *Transfer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransferUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransferUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransferUpdateOne) sqlSave(ctx context.Context) (_node *Transfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfer.FieldID)
		for _, f := range fields {
			if !transfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transfer.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transfer.FieldAmount, field.TypeInt, value)
	}
	if tuo.mutation.FromAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.FromAccountTable,
			Columns: []string{transfer.FromAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FromAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.FromAccountTable,
			Columns: []string{transfer.FromAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ToAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.ToAccountTable,
			Columns: []string{transfer.ToAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ToAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfer.ToAccountTable,
			Columns: []string{transfer.ToAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transfer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
