// Code generated by ent, DO NOT EDIT.

package transactionhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transactionhistory type in the database.
	Label = "transaction_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldAccountNumberID holds the string denoting the account_number_id field in the database.
	FieldAccountNumberID = "account_number_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUserAccounts holds the string denoting the user_accounts edge name in mutations.
	EdgeUserAccounts = "user_accounts"
	// Table holds the table name of the transactionhistory in the database.
	Table = "transaction_history"
	// UserAccountsTable is the table that holds the user_accounts relation/edge.
	UserAccountsTable = "transaction_history"
	// UserAccountsInverseTable is the table name for the UserAccount entity.
	// It exists in this package in order to avoid circular dependency with the "useraccount" package.
	UserAccountsInverseTable = "user_accounts"
	// UserAccountsColumn is the table column denoting the user_accounts relation/edge.
	UserAccountsColumn = "account_number_id"
)

// Columns holds all SQL columns for transactionhistory fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldAccountNumberID,
	FieldAmount,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the TransactionHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAccountNumberID orders the results by the account_number_id field.
func ByAccountNumberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumberID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserAccountsField orders the results by user_accounts field.
func ByUserAccountsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAccountsStep(), sql.OrderByField(field, opts...))
	}
}
func newUserAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserAccountsTable, UserAccountsColumn),
	)
}
