// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"comb.com/banking/ent/transactionhistory"
	"comb.com/banking/ent/useraccount"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TransactionHistory is the model entity for the TransactionHistory schema.
type TransactionHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// deposit | withdraw
	Type string `json:"type,omitempty"`
	// AccountNumberID holds the value of the "account_number_id" field.
	AccountNumberID int `json:"account_number_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionHistoryQuery when eager-loading is set.
	Edges        TransactionHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TransactionHistoryEdges holds the relations/edges for other nodes in the graph.
type TransactionHistoryEdges struct {
	// UserAccounts holds the value of the user_accounts edge.
	UserAccounts *UserAccount `json:"user_accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserAccountsOrErr returns the UserAccounts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionHistoryEdges) UserAccountsOrErr() (*UserAccount, error) {
	if e.UserAccounts != nil {
		return e.UserAccounts, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: useraccount.Label}
	}
	return nil, &NotLoadedError{edge: "user_accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransactionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactionhistory.FieldID, transactionhistory.FieldAccountNumberID, transactionhistory.FieldAmount:
			values[i] = new(sql.NullInt64)
		case transactionhistory.FieldType:
			values[i] = new(sql.NullString)
		case transactionhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransactionHistory fields.
func (th *TransactionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactionhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			th.ID = int(value.Int64)
		case transactionhistory.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				th.Type = value.String
			}
		case transactionhistory.FieldAccountNumberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_number_id", values[i])
			} else if value.Valid {
				th.AccountNumberID = int(value.Int64)
			}
		case transactionhistory.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				th.Amount = value.Int64
			}
		case transactionhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				th.CreatedAt = value.Time
			}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TransactionHistory.
// This includes values selected through modifiers, order, etc.
func (th *TransactionHistory) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}

// QueryUserAccounts queries the "user_accounts" edge of the TransactionHistory entity.
func (th *TransactionHistory) QueryUserAccounts() *UserAccountQuery {
	return NewTransactionHistoryClient(th.config).QueryUserAccounts(th)
}

// Update returns a builder for updating this TransactionHistory.
// Note that you need to call TransactionHistory.Unwrap() before calling this method if this TransactionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TransactionHistory) Update() *TransactionHistoryUpdateOne {
	return NewTransactionHistoryClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the TransactionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TransactionHistory) Unwrap() *TransactionHistory {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransactionHistory is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *TransactionHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TransactionHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
	builder.WriteString("type=")
	builder.WriteString(th.Type)
	builder.WriteString(", ")
	builder.WriteString("account_number_id=")
	builder.WriteString(fmt.Sprintf("%v", th.AccountNumberID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", th.Amount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(th.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TransactionHistories is a parsable slice of TransactionHistory.
type TransactionHistories []*TransactionHistory
