// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"comb.com/banking/ent/transaction"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionTime holds the value of the "TransactionTime" field.
	TransactionTime time.Time `json:"TransactionTime,omitempty"`
	// From holds the value of the "From" field.
	From int `json:"From,omitempty"`
	// To holds the value of the "To" field.
	To int `json:"To,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount       int `json:"Amount,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID, transaction.FieldFrom, transaction.FieldTo, transaction.FieldAmount:
			values[i] = new(sql.NullInt64)
		case transaction.FieldTransactionTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transaction.FieldTransactionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionTime", values[i])
			} else if value.Valid {
				t.TransactionTime = value.Time
			}
		case transaction.FieldFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field From", values[i])
			} else if value.Valid {
				t.From = int(value.Int64)
			}
		case transaction.FieldTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field To", values[i])
			} else if value.Valid {
				t.To = int(value.Int64)
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Amount", values[i])
			} else if value.Valid {
				t.Amount = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("TransactionTime=")
	builder.WriteString(t.TransactionTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("From=")
	builder.WriteString(fmt.Sprintf("%v", t.From))
	builder.WriteString(", ")
	builder.WriteString("To=")
	builder.WriteString(fmt.Sprintf("%v", t.To))
	builder.WriteString(", ")
	builder.WriteString("Amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
