// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"comb.com/banking/ent/predicate"
	"comb.com/banking/ent/user"
	"comb.com/banking/ent/userprofile"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProfileUpdate is the builder for updating UserProfile entities.
type UserProfileUpdate struct {
	config
	hooks    []Hook
	mutation *UserProfileMutation
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (upu *UserProfileUpdate) Where(ps ...predicate.UserProfile) *UserProfileUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetFirstname sets the "firstname" field.
func (upu *UserProfileUpdate) SetFirstname(s string) *UserProfileUpdate {
	upu.mutation.SetFirstname(s)
	return upu
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableFirstname(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetFirstname(*s)
	}
	return upu
}

// SetLastname sets the "lastname" field.
func (upu *UserProfileUpdate) SetLastname(s string) *UserProfileUpdate {
	upu.mutation.SetLastname(s)
	return upu
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableLastname(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetLastname(*s)
	}
	return upu
}

// SetAddress sets the "address" field.
func (upu *UserProfileUpdate) SetAddress(s string) *UserProfileUpdate {
	upu.mutation.SetAddress(s)
	return upu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableAddress(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetAddress(*s)
	}
	return upu
}

// SetGender sets the "gender" field.
func (upu *UserProfileUpdate) SetGender(s string) *UserProfileUpdate {
	upu.mutation.SetGender(s)
	return upu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableGender(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetGender(*s)
	}
	return upu
}

// SetBirthday sets the "birthday" field.
func (upu *UserProfileUpdate) SetBirthday(s string) *UserProfileUpdate {
	upu.mutation.SetBirthday(s)
	return upu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableBirthday(s *string) *UserProfileUpdate {
	if s != nil {
		upu.SetBirthday(*s)
	}
	return upu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upu *UserProfileUpdate) SetUserID(id int) *UserProfileUpdate {
	upu.mutation.SetUserID(id)
	return upu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (upu *UserProfileUpdate) SetNillableUserID(id *int) *UserProfileUpdate {
	if id != nil {
		upu = upu.SetUserID(*id)
	}
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserProfileUpdate) SetUser(u *User) *UserProfileUpdate {
	return upu.SetUserID(u.ID)
}

// Mutation returns the UserProfileMutation object of the builder.
func (upu *UserProfileUpdate) Mutation() *UserProfileMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserProfileUpdate) ClearUser() *UserProfileUpdate {
	upu.mutation.ClearUser()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProfileUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProfileUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.Firstname(); ok {
		_spec.SetField(userprofile.FieldFirstname, field.TypeString, value)
	}
	if value, ok := upu.mutation.Lastname(); ok {
		_spec.SetField(userprofile.FieldLastname, field.TypeString, value)
	}
	if value, ok := upu.mutation.Address(); ok {
		_spec.SetField(userprofile.FieldAddress, field.TypeString, value)
	}
	if value, ok := upu.mutation.Gender(); ok {
		_spec.SetField(userprofile.FieldGender, field.TypeString, value)
	}
	if value, ok := upu.mutation.Birthday(); ok {
		_spec.SetField(userprofile.FieldBirthday, field.TypeString, value)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProfileUpdateOne is the builder for updating a single UserProfile entity.
type UserProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserProfileMutation
}

// SetFirstname sets the "firstname" field.
func (upuo *UserProfileUpdateOne) SetFirstname(s string) *UserProfileUpdateOne {
	upuo.mutation.SetFirstname(s)
	return upuo
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableFirstname(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetFirstname(*s)
	}
	return upuo
}

// SetLastname sets the "lastname" field.
func (upuo *UserProfileUpdateOne) SetLastname(s string) *UserProfileUpdateOne {
	upuo.mutation.SetLastname(s)
	return upuo
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableLastname(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetLastname(*s)
	}
	return upuo
}

// SetAddress sets the "address" field.
func (upuo *UserProfileUpdateOne) SetAddress(s string) *UserProfileUpdateOne {
	upuo.mutation.SetAddress(s)
	return upuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableAddress(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetAddress(*s)
	}
	return upuo
}

// SetGender sets the "gender" field.
func (upuo *UserProfileUpdateOne) SetGender(s string) *UserProfileUpdateOne {
	upuo.mutation.SetGender(s)
	return upuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableGender(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetGender(*s)
	}
	return upuo
}

// SetBirthday sets the "birthday" field.
func (upuo *UserProfileUpdateOne) SetBirthday(s string) *UserProfileUpdateOne {
	upuo.mutation.SetBirthday(s)
	return upuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableBirthday(s *string) *UserProfileUpdateOne {
	if s != nil {
		upuo.SetBirthday(*s)
	}
	return upuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upuo *UserProfileUpdateOne) SetUserID(id int) *UserProfileUpdateOne {
	upuo.mutation.SetUserID(id)
	return upuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (upuo *UserProfileUpdateOne) SetNillableUserID(id *int) *UserProfileUpdateOne {
	if id != nil {
		upuo = upuo.SetUserID(*id)
	}
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserProfileUpdateOne) SetUser(u *User) *UserProfileUpdateOne {
	return upuo.SetUserID(u.ID)
}

// Mutation returns the UserProfileMutation object of the builder.
func (upuo *UserProfileUpdateOne) Mutation() *UserProfileMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserProfileUpdateOne) ClearUser() *UserProfileUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (upuo *UserProfileUpdateOne) Where(ps ...predicate.UserProfile) *UserProfileUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProfileUpdateOne) Select(field string, fields ...string) *UserProfileUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProfile entity.
func (upuo *UserProfileUpdateOne) Save(ctx context.Context) (*UserProfile, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProfileUpdateOne) SaveX(ctx context.Context) *UserProfile {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProfileUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserProfileUpdateOne) sqlSave(ctx context.Context) (_node *UserProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprofile.FieldID)
		for _, f := range fields {
			if !userprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.Firstname(); ok {
		_spec.SetField(userprofile.FieldFirstname, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Lastname(); ok {
		_spec.SetField(userprofile.FieldLastname, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Address(); ok {
		_spec.SetField(userprofile.FieldAddress, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Gender(); ok {
		_spec.SetField(userprofile.FieldGender, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Birthday(); ok {
		_spec.SetField(userprofile.FieldBirthday, field.TypeString, value)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserProfile{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
