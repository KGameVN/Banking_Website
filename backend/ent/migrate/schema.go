// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "expiredtime", Type: field.TypeTime},
		{Name: "is_using", Type: field.TypeBool, Default: true},
		{Name: "user_tokens", Type: field.TypeInt, Nullable: true},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount", Type: field.TypeInt},
		{Name: "user_account_transactions", Type: field.TypeInt, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_user_accounts_transactions",
				Columns:    []*schema.Column{TransactionsColumns[2]},
				RefColumns: []*schema.Column{UserAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionHistoryColumns holds the columns for the "transaction_history" table.
	TransactionHistoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "amount", Type: field.TypeInt64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "account_number_id", Type: field.TypeInt},
	}
	// TransactionHistoryTable holds the schema information for the "transaction_history" table.
	TransactionHistoryTable = &schema.Table{
		Name:       "transaction_history",
		Columns:    TransactionHistoryColumns,
		PrimaryKey: []*schema.Column{TransactionHistoryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transaction_history_user_accounts_account_number_id",
				Columns:    []*schema.Column{TransactionHistoryColumns[4]},
				RefColumns: []*schema.Column{UserAccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TransfersColumns holds the columns for the "transfers" table.
	TransfersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount", Type: field.TypeInt},
		{Name: "user_account_outgoing_transfers", Type: field.TypeInt, Nullable: true},
		{Name: "user_account_incoming_transfers", Type: field.TypeInt, Nullable: true},
	}
	// TransfersTable holds the schema information for the "transfers" table.
	TransfersTable = &schema.Table{
		Name:       "transfers",
		Columns:    TransfersColumns,
		PrimaryKey: []*schema.Column{TransfersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transfers_user_accounts_outgoing_transfers",
				Columns:    []*schema.Column{TransfersColumns[2]},
				RefColumns: []*schema.Column{UserAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transfers_user_accounts_incoming_transfers",
				Columns:    []*schema.Column{TransfersColumns[3]},
				RefColumns: []*schema.Column{UserAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserAccountsColumns holds the columns for the "user_accounts" table.
	UserAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "balance", Type: field.TypeInt64},
		{Name: "account_number", Type: field.TypeInt64, Unique: true},
		{Name: "user_user_id", Type: field.TypeInt, Unique: true},
	}
	// UserAccountsTable holds the schema information for the "user_accounts" table.
	UserAccountsTable = &schema.Table{
		Name:       "user_accounts",
		Columns:    UserAccountsColumns,
		PrimaryKey: []*schema.Column{UserAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_accounts_users_user_id",
				Columns:    []*schema.Column{UserAccountsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserProfilesColumns holds the columns for the "user_profiles" table.
	UserProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "firstname", Type: field.TypeString},
		{Name: "lastname", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "gender", Type: field.TypeString},
		{Name: "birthday", Type: field.TypeString},
		{Name: "user_profile", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UserProfilesTable holds the schema information for the "user_profiles" table.
	UserProfilesTable = &schema.Table{
		Name:       "user_profiles",
		Columns:    UserProfilesColumns,
		PrimaryKey: []*schema.Column{UserProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_profiles_users_profile",
				Columns:    []*schema.Column{UserProfilesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		TokensTable,
		TransactionsTable,
		TransactionHistoryTable,
		TransfersTable,
		UsersTable,
		UserAccountsTable,
		UserProfilesTable,
	}
)

func init() {
	TokensTable.ForeignKeys[0].RefTable = UsersTable
	TransactionsTable.ForeignKeys[0].RefTable = UserAccountsTable
	TransactionHistoryTable.ForeignKeys[0].RefTable = UserAccountsTable
	TransactionHistoryTable.Annotation = &entsql.Annotation{
		Table: "transaction_history",
	}
	TransfersTable.ForeignKeys[0].RefTable = UserAccountsTable
	TransfersTable.ForeignKeys[1].RefTable = UserAccountsTable
	UserAccountsTable.ForeignKeys[0].RefTable = UsersTable
	UserAccountsTable.Annotation = &entsql.Annotation{
		Table: "user_accounts",
	}
	UserProfilesTable.ForeignKeys[0].RefTable = UsersTable
}
