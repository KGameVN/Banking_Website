// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"comb.com/banking/ent/predicate"
	"comb.com/banking/ent/transactionhistory"
	"comb.com/banking/ent/useraccount"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionHistoryUpdate is the builder for updating TransactionHistory entities.
type TransactionHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionHistoryMutation
}

// Where appends a list predicates to the TransactionHistoryUpdate builder.
func (thu *TransactionHistoryUpdate) Where(ps ...predicate.TransactionHistory) *TransactionHistoryUpdate {
	thu.mutation.Where(ps...)
	return thu
}

// SetType sets the "type" field.
func (thu *TransactionHistoryUpdate) SetType(s string) *TransactionHistoryUpdate {
	thu.mutation.SetType(s)
	return thu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (thu *TransactionHistoryUpdate) SetNillableType(s *string) *TransactionHistoryUpdate {
	if s != nil {
		thu.SetType(*s)
	}
	return thu
}

// SetAccountNumberID sets the "account_number_id" field.
func (thu *TransactionHistoryUpdate) SetAccountNumberID(i int) *TransactionHistoryUpdate {
	thu.mutation.SetAccountNumberID(i)
	return thu
}

// SetNillableAccountNumberID sets the "account_number_id" field if the given value is not nil.
func (thu *TransactionHistoryUpdate) SetNillableAccountNumberID(i *int) *TransactionHistoryUpdate {
	if i != nil {
		thu.SetAccountNumberID(*i)
	}
	return thu
}

// SetAmount sets the "amount" field.
func (thu *TransactionHistoryUpdate) SetAmount(i int64) *TransactionHistoryUpdate {
	thu.mutation.ResetAmount()
	thu.mutation.SetAmount(i)
	return thu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (thu *TransactionHistoryUpdate) SetNillableAmount(i *int64) *TransactionHistoryUpdate {
	if i != nil {
		thu.SetAmount(*i)
	}
	return thu
}

// AddAmount adds i to the "amount" field.
func (thu *TransactionHistoryUpdate) AddAmount(i int64) *TransactionHistoryUpdate {
	thu.mutation.AddAmount(i)
	return thu
}

// SetUserAccountsID sets the "user_accounts" edge to the UserAccount entity by ID.
func (thu *TransactionHistoryUpdate) SetUserAccountsID(id int) *TransactionHistoryUpdate {
	thu.mutation.SetUserAccountsID(id)
	return thu
}

// SetUserAccounts sets the "user_accounts" edge to the UserAccount entity.
func (thu *TransactionHistoryUpdate) SetUserAccounts(u *UserAccount) *TransactionHistoryUpdate {
	return thu.SetUserAccountsID(u.ID)
}

// Mutation returns the TransactionHistoryMutation object of the builder.
func (thu *TransactionHistoryUpdate) Mutation() *TransactionHistoryMutation {
	return thu.mutation
}

// ClearUserAccounts clears the "user_accounts" edge to the UserAccount entity.
func (thu *TransactionHistoryUpdate) ClearUserAccounts() *TransactionHistoryUpdate {
	thu.mutation.ClearUserAccounts()
	return thu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thu *TransactionHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, thu.sqlSave, thu.mutation, thu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thu *TransactionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := thu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thu *TransactionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := thu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thu *TransactionHistoryUpdate) ExecX(ctx context.Context) {
	if err := thu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thu *TransactionHistoryUpdate) check() error {
	if v, ok := thu.mutation.GetType(); ok {
		if err := transactionhistory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TransactionHistory.type": %w`, err)}
		}
	}
	if thu.mutation.UserAccountsCleared() && len(thu.mutation.UserAccountsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionHistory.user_accounts"`)
	}
	return nil
}

func (thu *TransactionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := thu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactionhistory.Table, transactionhistory.Columns, sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeInt))
	if ps := thu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thu.mutation.GetType(); ok {
		_spec.SetField(transactionhistory.FieldType, field.TypeString, value)
	}
	if value, ok := thu.mutation.Amount(); ok {
		_spec.SetField(transactionhistory.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := thu.mutation.AddedAmount(); ok {
		_spec.AddField(transactionhistory.FieldAmount, field.TypeInt64, value)
	}
	if thu.mutation.UserAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionhistory.UserAccountsTable,
			Columns: []string{transactionhistory.UserAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thu.mutation.UserAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionhistory.UserAccountsTable,
			Columns: []string{transactionhistory.UserAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thu.mutation.done = true
	return n, nil
}

// TransactionHistoryUpdateOne is the builder for updating a single TransactionHistory entity.
type TransactionHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionHistoryMutation
}

// SetType sets the "type" field.
func (thuo *TransactionHistoryUpdateOne) SetType(s string) *TransactionHistoryUpdateOne {
	thuo.mutation.SetType(s)
	return thuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (thuo *TransactionHistoryUpdateOne) SetNillableType(s *string) *TransactionHistoryUpdateOne {
	if s != nil {
		thuo.SetType(*s)
	}
	return thuo
}

// SetAccountNumberID sets the "account_number_id" field.
func (thuo *TransactionHistoryUpdateOne) SetAccountNumberID(i int) *TransactionHistoryUpdateOne {
	thuo.mutation.SetAccountNumberID(i)
	return thuo
}

// SetNillableAccountNumberID sets the "account_number_id" field if the given value is not nil.
func (thuo *TransactionHistoryUpdateOne) SetNillableAccountNumberID(i *int) *TransactionHistoryUpdateOne {
	if i != nil {
		thuo.SetAccountNumberID(*i)
	}
	return thuo
}

// SetAmount sets the "amount" field.
func (thuo *TransactionHistoryUpdateOne) SetAmount(i int64) *TransactionHistoryUpdateOne {
	thuo.mutation.ResetAmount()
	thuo.mutation.SetAmount(i)
	return thuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (thuo *TransactionHistoryUpdateOne) SetNillableAmount(i *int64) *TransactionHistoryUpdateOne {
	if i != nil {
		thuo.SetAmount(*i)
	}
	return thuo
}

// AddAmount adds i to the "amount" field.
func (thuo *TransactionHistoryUpdateOne) AddAmount(i int64) *TransactionHistoryUpdateOne {
	thuo.mutation.AddAmount(i)
	return thuo
}

// SetUserAccountsID sets the "user_accounts" edge to the UserAccount entity by ID.
func (thuo *TransactionHistoryUpdateOne) SetUserAccountsID(id int) *TransactionHistoryUpdateOne {
	thuo.mutation.SetUserAccountsID(id)
	return thuo
}

// SetUserAccounts sets the "user_accounts" edge to the UserAccount entity.
func (thuo *TransactionHistoryUpdateOne) SetUserAccounts(u *UserAccount) *TransactionHistoryUpdateOne {
	return thuo.SetUserAccountsID(u.ID)
}

// Mutation returns the TransactionHistoryMutation object of the builder.
func (thuo *TransactionHistoryUpdateOne) Mutation() *TransactionHistoryMutation {
	return thuo.mutation
}

// ClearUserAccounts clears the "user_accounts" edge to the UserAccount entity.
func (thuo *TransactionHistoryUpdateOne) ClearUserAccounts() *TransactionHistoryUpdateOne {
	thuo.mutation.ClearUserAccounts()
	return thuo
}

// Where appends a list predicates to the TransactionHistoryUpdate builder.
func (thuo *TransactionHistoryUpdateOne) Where(ps ...predicate.TransactionHistory) *TransactionHistoryUpdateOne {
	thuo.mutation.Where(ps...)
	return thuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thuo *TransactionHistoryUpdateOne) Select(field string, fields ...string) *TransactionHistoryUpdateOne {
	thuo.fields = append([]string{field}, fields...)
	return thuo
}

// Save executes the query and returns the updated TransactionHistory entity.
func (thuo *TransactionHistoryUpdateOne) Save(ctx context.Context) (*TransactionHistory, error) {
	return withHooks(ctx, thuo.sqlSave, thuo.mutation, thuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thuo *TransactionHistoryUpdateOne) SaveX(ctx context.Context) *TransactionHistory {
	node, err := thuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thuo *TransactionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := thuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thuo *TransactionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := thuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thuo *TransactionHistoryUpdateOne) check() error {
	if v, ok := thuo.mutation.GetType(); ok {
		if err := transactionhistory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TransactionHistory.type": %w`, err)}
		}
	}
	if thuo.mutation.UserAccountsCleared() && len(thuo.mutation.UserAccountsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TransactionHistory.user_accounts"`)
	}
	return nil
}

func (thuo *TransactionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TransactionHistory, err error) {
	if err := thuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactionhistory.Table, transactionhistory.Columns, sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeInt))
	id, ok := thuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionhistory.FieldID)
		for _, f := range fields {
			if !transactionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thuo.mutation.GetType(); ok {
		_spec.SetField(transactionhistory.FieldType, field.TypeString, value)
	}
	if value, ok := thuo.mutation.Amount(); ok {
		_spec.SetField(transactionhistory.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := thuo.mutation.AddedAmount(); ok {
		_spec.AddField(transactionhistory.FieldAmount, field.TypeInt64, value)
	}
	if thuo.mutation.UserAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionhistory.UserAccountsTable,
			Columns: []string{transactionhistory.UserAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thuo.mutation.UserAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionhistory.UserAccountsTable,
			Columns: []string{transactionhistory.UserAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransactionHistory{config: thuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thuo.mutation.done = true
	return _node, nil
}
