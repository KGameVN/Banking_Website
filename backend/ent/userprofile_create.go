// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"comb.com/banking/ent/userprofile"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProfileCreate is the builder for creating a UserProfile entity.
type UserProfileCreate struct {
	config
	mutation *UserProfileMutation
	hooks    []Hook
}

// SetFirstname sets the "firstname" field.
func (upc *UserProfileCreate) SetFirstname(s string) *UserProfileCreate {
	upc.mutation.SetFirstname(s)
	return upc
}

// SetLastname sets the "lastname" field.
func (upc *UserProfileCreate) SetLastname(s string) *UserProfileCreate {
	upc.mutation.SetLastname(s)
	return upc
}

// SetCmnd sets the "cmnd" field.
func (upc *UserProfileCreate) SetCmnd(s string) *UserProfileCreate {
	upc.mutation.SetCmnd(s)
	return upc
}

// SetAddress sets the "address" field.
func (upc *UserProfileCreate) SetAddress(s string) *UserProfileCreate {
	upc.mutation.SetAddress(s)
	return upc
}

// SetGender sets the "gender" field.
func (upc *UserProfileCreate) SetGender(b bool) *UserProfileCreate {
	upc.mutation.SetGender(b)
	return upc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableGender(b *bool) *UserProfileCreate {
	if b != nil {
		upc.SetGender(*b)
	}
	return upc
}

// SetBirthday sets the "birthday" field.
func (upc *UserProfileCreate) SetBirthday(s string) *UserProfileCreate {
	upc.mutation.SetBirthday(s)
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserProfileCreate) SetCreatedAt(t time.Time) *UserProfileCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableCreatedAt(t *time.Time) *UserProfileCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserProfileCreate) SetUpdatedAt(t time.Time) *UserProfileCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserProfileCreate) SetNillableUpdatedAt(t *time.Time) *UserProfileCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// Mutation returns the UserProfileMutation object of the builder.
func (upc *UserProfileCreate) Mutation() *UserProfileMutation {
	return upc.mutation
}

// Save creates the UserProfile in the database.
func (upc *UserProfileCreate) Save(ctx context.Context) (*UserProfile, error) {
	upc.defaults()
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserProfileCreate) SaveX(ctx context.Context) *UserProfile {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserProfileCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserProfileCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserProfileCreate) defaults() {
	if _, ok := upc.mutation.Gender(); !ok {
		v := userprofile.DefaultGender
		upc.mutation.SetGender(v)
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		v := userprofile.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		v := userprofile.DefaultUpdatedAt()
		upc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserProfileCreate) check() error {
	if _, ok := upc.mutation.Firstname(); !ok {
		return &ValidationError{Name: "firstname", err: errors.New(`ent: missing required field "UserProfile.firstname"`)}
	}
	if v, ok := upc.mutation.Firstname(); ok {
		if err := userprofile.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "firstname", err: fmt.Errorf(`ent: validator failed for field "UserProfile.firstname": %w`, err)}
		}
	}
	if _, ok := upc.mutation.Lastname(); !ok {
		return &ValidationError{Name: "lastname", err: errors.New(`ent: missing required field "UserProfile.lastname"`)}
	}
	if v, ok := upc.mutation.Lastname(); ok {
		if err := userprofile.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "lastname", err: fmt.Errorf(`ent: validator failed for field "UserProfile.lastname": %w`, err)}
		}
	}
	if _, ok := upc.mutation.Cmnd(); !ok {
		return &ValidationError{Name: "cmnd", err: errors.New(`ent: missing required field "UserProfile.cmnd"`)}
	}
	if v, ok := upc.mutation.Cmnd(); ok {
		if err := userprofile.CmndValidator(v); err != nil {
			return &ValidationError{Name: "cmnd", err: fmt.Errorf(`ent: validator failed for field "UserProfile.cmnd": %w`, err)}
		}
	}
	if _, ok := upc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "UserProfile.address"`)}
	}
	if v, ok := upc.mutation.Address(); ok {
		if err := userprofile.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "UserProfile.address": %w`, err)}
		}
	}
	if _, ok := upc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "UserProfile.gender"`)}
	}
	if _, ok := upc.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`ent: missing required field "UserProfile.birthday"`)}
	}
	if v, ok := upc.mutation.Birthday(); ok {
		if err := userprofile.BirthdayValidator(v); err != nil {
			return &ValidationError{Name: "birthday", err: fmt.Errorf(`ent: validator failed for field "UserProfile.birthday": %w`, err)}
		}
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserProfile.created_at"`)}
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserProfile.updated_at"`)}
	}
	return nil
}

func (upc *UserProfileCreate) sqlSave(ctx context.Context) (*UserProfile, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserProfileCreate) createSpec() (*UserProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &UserProfile{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userprofile.Table, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	)
	if value, ok := upc.mutation.Firstname(); ok {
		_spec.SetField(userprofile.FieldFirstname, field.TypeString, value)
		_node.Firstname = value
	}
	if value, ok := upc.mutation.Lastname(); ok {
		_spec.SetField(userprofile.FieldLastname, field.TypeString, value)
		_node.Lastname = value
	}
	if value, ok := upc.mutation.Cmnd(); ok {
		_spec.SetField(userprofile.FieldCmnd, field.TypeString, value)
		_node.Cmnd = value
	}
	if value, ok := upc.mutation.Address(); ok {
		_spec.SetField(userprofile.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := upc.mutation.Gender(); ok {
		_spec.SetField(userprofile.FieldGender, field.TypeBool, value)
		_node.Gender = value
	}
	if value, ok := upc.mutation.Birthday(); ok {
		_spec.SetField(userprofile.FieldBirthday, field.TypeString, value)
		_node.Birthday = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UserProfileCreateBulk is the builder for creating many UserProfile entities in bulk.
type UserProfileCreateBulk struct {
	config
	err      error
	builders []*UserProfileCreate
}

// Save creates the UserProfile entities in the database.
func (upcb *UserProfileCreateBulk) Save(ctx context.Context) ([]*UserProfile, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserProfile, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserProfileCreateBulk) SaveX(ctx context.Context) []*UserProfile {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserProfileCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}
